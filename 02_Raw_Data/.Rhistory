R Studio
"R Studio"
"hllo"
"hello"
char <- " thiis is a charachter"
char
char <- " this is a charachter"
class(char)
name <- "Li"
paste(hi, name)
hi <- "hi"
paste (hi, name)
(hi_li <- paste(hi, name))
num1 <- 14.3
num2 <- 1/3
round(num2)
round(num2); round(num2,1); round(num2, 2)
round(num1)
TRUE != FALSE
T != F
!(T&F)
T & F
vec <- c(123, 231, 312)
vec
class(vac)
class(vec)
vec2 <- c(123,231, "312")
class(vec2)
vec2
lenght(vec)
length(vec)
names (vec) <- c("num1", "num2", "num3")
vec
vec[2]
vec^2
1:10
1:15
one_two_five <- 1:5
names_o_t_f <- paste("num", one_to_five)
one_to_five <- 1:5
names_o_t_f <- paste("num", one_to_five)
names_o_t_f
names_o_t_f <- paste0("num", one_to_five)
names_o_t_f
?seq()
install.packages("readxl")
install.packages("readxl")
library("readxl")
---
title: "Macroeconometrics HW1"
---
title: "Macroeconometrics HW1"
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(stats)
library(urca)
library(vars)
data.raw <- read.csv("current.csv",sep = ",", dec = ".")[-1,]
knitr::opts_chunk$set(echo = TRUE)
library(stats)
library(urca)
library(vars)
data.raw <- read.csv("current.csv",sep = ",", dec = ".")[-1,]
knitr::opts_chunk$set(echo = TRUE)
library(stats)
library(urca)
library(vars)
data.raw <- read.csv("current.csv",sep = ",", dec = ".")[-1,]
tinytex
tinytex::install_tinytex()
knitr::opts_chunk$set(echo = TRUE)
Fred_MD <- read.csv("current.csv")
tinytex::install_tinytex()
clear all
clearall
set.seed(123)
draw = rnorm(n = 100, mean = 5, sd = 3)
mean = sapply(1:100, function(x) mean(draw[1:x]))
plot(mean, type = "l", xlab = "n", ylab = "Mean")
abline(h = 5, col = "blue", lt = 3)
rm(data.raw)
rm(Fred_MD)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Downloads")
data <- read.csv("UNRATE.csv")
library(dplyr)
demeaned_data <- data %>%
mutate(Demeaned = UNRATE - mean(UNRATE))
# Load necessary packages
library(rstan)
library(ggplot2)
library(scales)
# Prepare the data
y <- demeaned_data$Demeaned
N <- length(y)
# AR(1) model with different priors
stan_code <- "
data {
int<lower=0> N;         // Number of data points
vector[N] y;            // Demeaned time series data
}
parameters {
real<lower=-1, upper=1> rho;  // Autoregressive coefficient
}
model {
rho ~ <PRIOR_DISTRIBUTION>;  // Prior on rho
// Likelihood
for (n in 2:N) {
y[n] ~ normal(0 + rho * y[n-1], 1);
}
}
"
prior_options <- list(
"Normal: N(0, 1)" = list(prior_distribution = "normal(0, 1)"),
"Normal: N(1, 1)" = list(prior_distribution = "normal(1, 1)")
)
# Fit the AR(1) model with different priors
ar1_fits <- list()
for (i in seq_along(prior_options)) {
# Compile the Stan model with the specific prior distribution
stan_model_code <- paste0(
"model {",
"  ", stan_code,
"}"
)
stan_model_code <- gsub("<PRIOR_DISTRIBUTION>", prior_options[[i]]$prior_distribution, stan_model_code)
ar1_model <- stan_model(model_code = stan_model_code)
# Fit the model
ar1_fits[[i]] <- sampling(
object = ar1_model,
data = list(N = N, y = y),
chains = 4, iter = 2000, warmup = 1000, thin = 1,
control = list(adapt_delta = 0.99)
)
}
install.packages("quantmod")
install.packages("bayesm")
install.packages("ggplot2")
library(quantmod)  # For fetching economic data
library(bayesm)  # For Bayesian estimation
library(ggplot2)  # For plotting
install.packages("ggplot2")
unemp <- data$UNRATE
demeaned_unemp <- unemp - mean(unemp)
phi <- c(0, 1)  # Possible values for phi
# Define the prior distributions
priors <- list(
"Normal(0,1)" = list("betaprior" = phi, "Vbetaprior" = diag(1)),
"Beta(0.1,0.1)" = list("betaprior" = rbeta(length(phi), 0.1, 0.1), "Vbetaprior" = diag(1)),
"Beta(1,1)" = list("betaprior" = rbeta(length(phi), 1, 1), "Vbetaprior" = diag(1)),
"Beta(10,10)" = list("betaprior" = rbeta(length(phi), 10, 10), "Vbetaprior" = diag(1))
)
niter <- 10000  # Number of iterations
burn <- 5000  # Burn-in
posterior_samples <- list()  # Store posterior samples for each prior
# Fit the AR(1) models and collect the posterior samples for each prior:
for (prior_name in names(priors)) {
prior <- priors[[prior_name]]
# Fit the AR(1) model
out <- MCMCmetrop1R(demeaned_unemp, niter = niter, burnin = burn, betaprior = prior$betaprior, Vbetaprior = prior$Vbetaprior)
# Collect posterior samples
posterior_samples[[prior_name]] <- out$betadraw
}
library(bayesm)  # For Bayesian estimation
library(ggplot2)  # For plotting
# Fit the AR(1) models and collect the posterior samples for each prior:
for (prior_name in names(priors)) {
prior <- priors[[prior_name]]
# Fit the AR(1) model
out <- MCMCmetrop1R(demeaned_unemp, niter = niter, burnin = burn, betaprior = prior$betaprior, Vbetaprior = prior$Vbetaprior)
# Collect posterior samples
posterior_samples[[prior_name]] <- out$betadraw
}
install.packages("bayesm")
install.packages("bayesm")
library(bayesm)  # For Bayesian estimation
# Fit the AR(1) models and collect the posterior samples for each prior:
for (prior_name in names(priors)) {
prior <- priors[[prior_name]]
# Fit the AR(1) model
out <- MCMCmetrop1R(demeaned_unemp, niter = niter, burnin = burn, betaprior = prior$betaprior, Vbetaprior = prior$Vbetaprior)
# Collect posterior samples
posterior_samples[[prior_name]] <- out$betadraw
}
install.packages("MCMCpack")
install.packages("MCMCpack")
library(MCMCpack)  # For Bayesian estimation
# Fit the AR(1) models and collect the posterior samples for each prior:
for (prior_name in names(priors)) {
prior <- priors[[prior_name]]
# Fit the AR(1) model
out <- MCMCmetrop1R(demeaned_unemp, niter = niter, burnin = burn, betaprior = prior$betaprior, Vbetaprior = prior$Vbetaprior)
# Collect posterior samples
posterior_samples[[prior_name]] <- out$betadraw
}
summary(data2015)
data2015 <- read.csv("completedata2015_new.csv")
setwd("~/Documents/GitHub/MacrometricsProject_2023/02_Raw_Data")
library(readr)
completedata2015_new <- read_delim("completedata2015_new.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(completedata2015_new)
data2015 <- completedata2015_new
summary(data2015)
bma1
data2015 <- completedata2015_new
summary(data2015)
attach(data2015)
predictors <- as.matrix(cbind(continent, DirectBorder, SecondaryBorder, Nato, OKVS, BRICS, electdem_vdem_owid, electdem_vdem_high_owid, electdem_vdem_low_owid, Neutrality ,dist, `GDP growth`, Soviet))
head(predictors)
bma1 <- bicreg(predictors, data2015$pct2021)
library(BMA)
attach(data2015)
predictors <- as.matrix(cbind(continent, DirectBorder, SecondaryBorder, Nato, OKVS, BRICS, electdem_vdem_owid, electdem_vdem_high_owid, electdem_vdem_low_owid, Neutrality ,dist, `GDP growth`, Soviet))
head(predictors)
bma1 <- bicreg(predictors, data2015$pct2021)
