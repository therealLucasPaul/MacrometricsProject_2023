GenderData$ymin = c(0, head(GenderData$ymax, n=-1))
GenderData$labelPosition <- (GenderData$ymax + GenderData$ymin) / 2
ggplot(GenderData, aes(ymax=ymax, ymin=ymin, xmax=4,xmin=2.8, fill=Gender))+
geom_rect(color ="black", alpha=0.6) +
coord_polar(theta="y") +
geom_label( x=3.4, aes(y=labelPosition, label=paste(Gender, ": ",Freq, sep="")), size=3, alpha=0.6) +
scale_fill_manual(values = cols[1:2])+
xlim(c(2, 4))+
theme_void()+
ggtitle("Anteil von Buben und Mädchen an abgegebenen Fragebögen", subtitle =paste("Baseline; Stichprobe = ",length(na.omit(dataBaseline$Female)), sep=""))
dataBaseline <- read_xlsx("Data/BaselineKinder_Value.xlsx", col_types = c("text")) %>%
slice(-1) %>%
mutate(StartDate = as.Date(as.numeric(StartDate), origin = "1899-12-30")) %>%
mutate(EndDate = as.Date(as.numeric(EndDate), origin = "1899-12-30")) %>%
filter(!(RobiID %in% c("Test","933"))) %>%
mutate(RobiID = as.numeric(RobiID)) %>%
distinct(RobiID, .keep_all = TRUE) %>%
mutate(across(.fns = type.convert)) %>%
#filter(Finished == "True")%>%
#na.omit() %>%
#select(-Status) %>%
arrange(RobiID)
dataExPost <- read_xlsx("Data/ExPostKinder_Value.xlsx") %>%
slice(-1) %>%
mutate(StartDate = as.Date(as.numeric(StartDate), origin = "1899-12-30")) %>%
mutate(EndDate = as.Date(as.numeric(EndDate), origin = "1899-12-30")) %>%
filter(!(RobiID %in% c("Test","Test1"))) %>%
mutate(RobiID = as.numeric(RobiID)) %>%
distinct(RobiID, .keep_all = TRUE) %>%
mutate(across(.fns = type.convert)) %>%
#filter(Finished == "True")%>%
#na.omit() %>%
arrange(RobiID) %>%
select(-Status)
MatchData <- inner_join(dataExPost, dataBaseline, by="RobiID", suffix=c(".ExPost",".Baseline")) %>%
## Relative Interest Scores Baseline
mutate(sum_job_interest_mint.Baseline=Int_tech.Baseline + Int_mat.Baseline + Int_inf.Baseline) %>%
mutate(sum_job_interest_other.Baseline=Int_kul.Baseline + Int_kun.Baseline + Int_soz.Baseline) %>%
mutate(rel_interest_mint.Baseline =
ifelse(sum_job_interest_mint.Baseline + sum_job_interest_other.Baseline!=0,
sum_job_interest_mint.Baseline/(sum_job_interest_mint.Baseline+sum_job_interest_other.Baseline), 0)) %>%
mutate(sum_job_abil_mint.Baseline=Abil_tech.Baseline + Abil_mat.Baseline + Abil_inf.Baseline) %>%
mutate(sum_job_abil_other.Baseline=Abil_kul.Baseline + Abil_kun.Baseline + Abil_soz.Baseline) %>%
mutate(rel_abil_mint.Baseline =
ifelse(sum_job_abil_mint.Baseline + sum_job_abil_other.Baseline!=0,
sum_job_abil_mint.Baseline/(sum_job_abil_mint.Baseline+sum_job_abil_other.Baseline), 0))%>%
## Relative Interest Scores ExPost
mutate(sum_job_interest_mint.ExPost=Int_tech.ExPost + Int_mat.ExPost + Int_inf.ExPost) %>%
mutate(sum_job_interest_other.ExPost=Int_kul.ExPost + Int_kun.ExPost + Int_soz.ExPost) %>%
mutate(rel_interest_mint.ExPost =
ifelse(sum_job_interest_mint.ExPost + sum_job_interest_other.ExPost!=0,
sum_job_interest_mint.ExPost/(sum_job_interest_mint.ExPost+sum_job_interest_other.ExPost), 0)) %>%
mutate(sum_job_abil_mint.ExPost=Abil_tech.ExPost + Abil_mat.ExPost + Abil_inf.ExPost) %>%
mutate(sum_job_abil_other.ExPost=Abil_kul.ExPost + Abil_kun.ExPost + Abil_soz.ExPost) %>%
mutate(rel_abil_mint.ExPost =
ifelse(sum_job_abil_mint.ExPost + sum_job_abil_other.ExPost!=0,
sum_job_abil_mint.ExPost/(sum_job_abil_mint.ExPost+sum_job_abil_other.ExPost), 0))
######
Computed_Baseline <- dataBaseline %>%
mutate(sum_job_interest_mint=Int_tech + Int_mat + Int_inf) %>%
mutate(sum_job_interest_other=Int_kul + Int_kun + Int_soz) %>%
mutate(rel_interest_mint =
ifelse(sum_job_interest_mint + sum_job_interest_other != 0,
sum_job_interest_mint/(sum_job_interest_mint+sum_job_interest_other), 0)) %>%
mutate(sum_job_abil_mint=Abil_tech + Abil_mat + Abil_inf) %>%
mutate(sum_job_abil_other=Abil_kul + Abil_kun + Abil_soz) %>%
mutate(rel_abil_mint =
ifelse(sum_job_abil_mint + sum_job_abil_other!=0,
sum_job_abil_mint/(sum_job_abil_mint+sum_job_abil_other), 0))
Computed_ExPost <- dataExPost %>%
mutate(sum_job_interest_mint=Int_tech + Int_mat + Int_inf) %>%
mutate(sum_job_interest_other=Int_kul + Int_kun + Int_soz) %>%
mutate(rel_interest_mint =
ifelse(sum_job_interest_mint + sum_job_interest_other != 0,
sum_job_interest_mint/(sum_job_interest_mint+sum_job_interest_other), 0)) %>%
mutate(sum_job_abil_mint=Abil_tech + Abil_mat + Abil_inf) %>%
mutate(sum_job_abil_other=Abil_kul + Abil_kun + Abil_soz) %>%
mutate(rel_abil_mint =
ifelse(sum_job_abil_mint + sum_job_abil_other!=0,
sum_job_abil_mint/(sum_job_abil_mint+sum_job_abil_other), 0))
commonIDs <- intersect(dataBaseline$RobiID,dataExPost$RobiID)
commonIDs
test <- wilcox.test(Computed_Baseline$rel_interest_mint, Computed_ExPost$rel_interest_mint, alternative = "two.sided", na.action = "na.omit")
output_df <- data.frame(`Ex Ante` = c(round(mean(Computed_Baseline$rel_interest_mint, na.rm=TRUE),4),
round(median(Computed_Baseline$rel_interest_mint, na.rm=TRUE),4)),
`Ex Post` = c(round(mean(Computed_ExPost$rel_interest_mint, na.rm=TRUE),4),
round(median(Computed_ExPost$rel_interest_mint, na.rm=TRUE),4)),
`Wilcoxon Rangsummentest` =c(paste(test$statistic,"(",round(test$p.value,5),")",sep=""), ""))
row.names(output_df) <- c("Mittelwert","Median")
#output_df
kable(output_df, col.names = c( "Ex Ante", "Ex Post", "Wilcoxon Rangsummentest"),  escape = F, caption = "Vergleich der relative MINT Interest Scores - Vorher vs. Nachher", format="latex") %>%
kableExtra::kable_styling(latex_options = "hold_position")
mu <- round(mean(MatchData$rel_interest_mint.Baseline, na.rm=TRUE),2)
md <- round(median(MatchData$rel_interest_mint.Baseline, na.rm=TRUE),2)
ggplot(MatchData, aes(x=rel_interest_mint.Baseline)) +
geom_histogram(color="black", fill="#69b3a2", alpha=0.6)+
theme_minimal()+
xlab("Relative MINT Interest Score")+
ylab("Freqency")+
xlim(0,1)+
geom_vline(xintercept=mu, col="red")+
annotate("text", x=0.7, y=10, label=paste("Mittelwert: ",mu,sep=""), col="red")+
geom_vline(xintercept=md, col="blue")+
annotate("text", x=0.7, y=9, label=paste("Median: ",md,sep=""), col="blue")+
ggtitle("Verteilung des Relative MINT Interest Scores", subtitle =paste("Baseline; Sample Size = ",length(na.omit(MatchData$rel_interest_mint.Baseline)), sep=""))
mu <- round(mean(MatchData$rel_interest_mint.ExPost, na.rm=TRUE),2)
md <- round(median(MatchData$rel_interest_mint.ExPost, na.rm=TRUE),2)
ggplot(MatchData, aes(x=rel_interest_mint.ExPost)) +
geom_histogram(color="black", fill="#f68060", alpha=0.6)+
theme_minimal()+
geom_vline(xintercept=mu, col="red")+
annotate("text", x=0.7, y=10, label=paste("Mittelwert: ",mu,sep=""), col="red")+
geom_vline(xintercept=md, col="blue")+
annotate("text", x=0.7, y=9, label=paste("Median: ",md,sep=""), col="blue")+
xlab("Relative MINT Interest Score")+
ylab("Freqency")+
xlim(0,1)+
ggtitle("Verteiung des Relative MINT Interest Scores", subtitle =paste("Ex Post; Sample Size = ",length(na.omit(MatchData$rel_interest_mint.ExPost)), sep=""))
ggplot(MatchData) +
geom_histogram(aes(x=rel_interest_mint.Baseline, y = ..density..),
color="black", fill="#69b3a2", alpha=0.6, binwidth = 0.025)+
geom_histogram(aes(x=rel_interest_mint.ExPost, y = -..density..),
color="black", fill="#f68060", alpha=0.6, binwidth = 0.025)+
geom_label( aes(x=0.9, y=5, label="Baseline"), color="#69b3a2") +
geom_label( aes(x=0.9, y=-5, label="ExPost"), color="#f68060") +
scale_y_continuous(labels = function(x) if_else(x<0, -x, x))+
theme_minimal()+
xlab("Relative MINT Interest Score")+
ylab("Freqency")+
xlim(0,1)+
ggtitle("Verteilung des Relative MINT Interest Scores", subtitle = "Baseline und ExPost")
datatable_relInterest <- data.frame(Baseline = c(round(mean(MatchData$rel_interest_mint.Baseline, na.rm=TRUE),2),
round(median(MatchData$rel_interest_mint.Baseline, na.rm=TRUE),2)),
ExPost = c(round(mean(MatchData$rel_interest_mint.ExPost, na.rm=TRUE),2),
round(median(MatchData$rel_interest_mint.ExPost, na.rm=TRUE),2)),
row.names = c("Mean","Median"))
datatable_relInterest
tmp_Female <- MatchData %>% filter(Female == 1)
mu <- round(mean(tmp_Female$rel_interest_mint.Baseline, na.rm=TRUE),2)
md <- round(median(tmp_Female$rel_interest_mint.Baseline, na.rm=TRUE),2)
ggplot(tmp_Female, aes(x=rel_interest_mint.Baseline)) +
geom_histogram(color="black", fill="#69b3a2", alpha=0.6)+
theme_minimal()+
xlab("Relative MINT Interest Score")+
ylab("Freqency")+
xlim(0,1)+
geom_vline(xintercept=mu, col="red")+
annotate("text", x=0.7, y=10, label=paste("Mittelwert: ",mu,sep=""), col="red")+
geom_vline(xintercept=md, col="blue")+
annotate("text", x=0.7, y=9, label=paste("Median: ",md,sep=""), col="blue")+
ggtitle("Verteilung des Relative MINT Interest Scores bei Mädchen", subtitle =paste("Baseline; Sample Size = ",length(na.omit(tmp_Female$rel_interest_mint.Baseline)), sep=""))
mu <- round(mean(tmp_Female$rel_interest_mint.ExPost, na.rm=TRUE),2)
md <- round(median(tmp_Female$rel_interest_mint.ExPost, na.rm=TRUE),2)
ggplot(tmp_Female, aes(x=rel_interest_mint.ExPost)) +
geom_histogram(color="black", fill="#f68060", alpha=0.6)+
theme_minimal()+
geom_vline(xintercept=mu, col="red")+
annotate("text", x=0.7, y=10, label=paste("Mittelwert: ",mu,sep=""), col="red")+
geom_vline(xintercept=md, col="blue")+
annotate("text", x=0.7, y=9, label=paste("Median: ",md,sep=""), col="blue")+
xlab("Relative MINT Interest Score")+
ylab("Freqency")+
xlim(0,1)+
ggtitle("Verteiung des Relative MINT Interest Scores bei Mädchen", subtitle =paste("Ex Post; Sample Size = ",length(na.omit(tmp_Female$rel_interest_mint.ExPost)), sep=""))
ggplot(tmp_Female) +
geom_histogram(aes(x=rel_interest_mint.Baseline, y = ..density..),
color="black", fill="#69b3a2", alpha=0.6, binwidth = 0.025)+
geom_histogram(aes(x=rel_interest_mint.ExPost, y = -..density..),
color="black", fill="#f68060", alpha=0.6, binwidth = 0.025)+
geom_label( aes(x=0.9, y=5, label="Baseline"), color="#69b3a2") +
geom_label( aes(x=0.9, y=-5, label="ExPost"), color="#f68060") +
scale_y_continuous(labels = function(x) if_else(x<0, -x, x))+
theme_minimal()+
xlab("Relative MINT Interest Score")+
ylab("Freqency")+
xlim(0,1)+
ggtitle("Verteilung des Relative MINT Interest Scores bei Mädchen", subtitle = "Baseline und ExPost")
tmp <- Computed_Baseline
mu <- round(mean(tmp$rel_interest_mint, na.rm=TRUE),2)
md <- round(median(tmp$rel_interest_mint, na.rm=TRUE),2)
ggplot(tmp, aes(x=rel_interest_mint)) +
geom_histogram(color="black", fill="#69b3a2", alpha=0.6)+
theme_minimal()+
xlab("Relative MINT Interest Score")+
ylab("Freqency")+
xlim(0,1)+
geom_vline(xintercept=mu, col="red")+
annotate("text", x=0.7, y=55, label=paste("Mittelwert: ",mu,sep=""), col="red")+
geom_vline(xintercept=md, col="blue")+
annotate("text", x=0.7, y=50, label=paste("Median: ",md,sep=""), col="blue")+
ggtitle("Verteilung des Relative MINT Interest Scores", subtitle =paste("Baseline; Sample Size = ",length(na.omit(tmp$rel_interest_mint)), sep=""))
tmp <- Computed_Baseline
mu <- round(mean(tmp$rel_interest_mint, na.rm=TRUE),2)
md <- round(median(tmp$rel_interest_mint, na.rm=TRUE),2)
ggplot(tmp, aes(x=rel_interest_mint)) +
geom_histogram(color="black", fill="#69b3a2", alpha=0.6)+
theme_minimal()+
xlab("Relative MINT Interest Score")+
ylab("Freqency")+
xlim(0,1)+
geom_vline(xintercept=mu, col="red")+
annotate("text", x=0.7, y=55, label=paste("Mittelwert: ",mu,sep=""), col="red")+
geom_vline(xintercept=md, col="blue")+
annotate("text", x=0.7, y=50, label=paste("Median: ",md,sep=""), col="blue")+
ggtitle("Verteilung des Relative MINT Interest Scores", subtitle =paste("Baseline; Sample Size = ",length(na.omit(tmp$rel_interest_mint)), sep=""))
tmp <- Computed_ExPost
mu <- round(mean(tmp$rel_interest_mint, na.rm=TRUE),2)
md <- round(median(tmp$rel_interest_mint, na.rm=TRUE),2)
ggplot(tmp_Female, aes(x=rel_interest_mint)) +
geom_histogram(color="black", fill=cols[2], alpha=0.6)+
theme_minimal()+
xlab("Relative MINT Interest Score")+
ylab("Freqency")+
xlim(0,1)+
geom_vline(xintercept=mu, col="red")+
annotate("text", x=0.7, y=12, label=paste("Mittelwert: ",mu,sep=""), col="red")+
geom_vline(xintercept=md, col="blue")+
annotate("text", x=0.7, y=9, label=paste("Median: ",md,sep=""), col="blue")+
ggtitle("Verteilung des Relative MINT Interest Scores", subtitle =paste("ExPost; Sample Size = ",length(na.omit(tmp$rel_interest_mint)), sep=""))
tmp <- Computed_ExPost
mu <- round(mean(tmp$rel_interest_mint, na.rm=TRUE),2)
md <- round(median(tmp$rel_interest_mint, na.rm=TRUE),2)
ggplot(tmp, aes(x=rel_interest_mint)) +
geom_histogram(color="black", fill=cols[2], alpha=0.6)+
theme_minimal()+
xlab("Relative MINT Interest Score")+
ylab("Freqency")+
xlim(0,1)+
geom_vline(xintercept=mu, col="red")+
annotate("text", x=0.7, y=12, label=paste("Mittelwert: ",mu,sep=""), col="red")+
geom_vline(xintercept=md, col="blue")+
annotate("text", x=0.7, y=9, label=paste("Median: ",md,sep=""), col="blue")+
ggtitle("Verteilung des Relative MINT Interest Scores", subtitle =paste("ExPost; Sample Size = ",length(na.omit(tmp$rel_interest_mint)), sep=""))
mu <- round(mean(MatchData$rel_abil_mint.Baseline, na.rm=TRUE),2)
md <- round(median(MatchData$rel_abil_mint.Baseline, na.rm=TRUE),2)
ggplot(MatchData, aes(x=rel_abil_mint.Baseline)) +
geom_histogram(color="black", fill="#69b3a2", alpha=0.6)+
theme_minimal()+
xlab("Relative MINT Ability Score")+
ylab("Freqency")+
xlim(0,1)+
geom_vline(xintercept=mu, col="red")+
annotate("text", x=0.7, y=10, label=paste("Mittelwert: ",mu,sep=""), col="red")+
geom_vline(xintercept=md, col="blue")+
annotate("text", x=0.7, y=9, label=paste("Median: ",md,sep=""), col="blue")+
ggtitle("Verteilung des Relative MINT Ability Scores", subtitle =paste("Baseline; Sample Size = ",length(na.omit(MatchData$rel_abil_mint.Baseline)), sep=""))
kable(output_df, col.names = c( "Ex Ante", "Ex Post", "Wilcoxon Rangsummentest"),  escape = F, caption = "Vergleich der relative MINT Interest Scores - Vorher vs. Nachher", format="latex") %>%
kableExtra::kable_styling(latex_options = "hold_position")
kable(output_df, col.names = c( "Ex Ante", "Ex Post", "Wilcoxon Rangsummentest"),  escape = F, caption = "Vergleich der relative MINT Interest Scores - Vorher vs. Nachher") %>%
kableExtra::kable_styling(latex_options = "hold_position")
## Necessary Packages
rm(list=ls())
setwd("~/MacrometricsProject/MacrometricsProject_2023/03_Code_R")
## Get Data
totaldata <- read.csv("../02_Raw_Data/completedata.csv")
## Necessary Packages
rm(list=ls())
library(readxl)
library(tidyverse)
military_data <- read_xlsx("../02_Raw_Data/SIPRI_MillexData.xlsx",sheet = "Share of GDP_Adjusted", range="A6:BX180") %>% ### Data on military expenditure
select(Country, `2021`) %>%
filter(!(`2021` %in% c("xxx","...", NA))) %>%
mutate(pct2021 = as.numeric(`2021`)*100) %>%
select(-`2021`) %>%
arrange(Country)
country_data <- read_xls("../02_Raw_Data/geo_cepii.xls") %>% ### ISO Codes of Countries (necessary link)
select(iso2, iso3, country, continent, city_en) %>%
rename(Country = country) %>%
rename(capital = city_en) %>%
add_row(iso2 = "ME", iso3 = "MNE", Country = "Montenegro", continent = "Europe", capital = "Podgorica")
distance_data <- read_xls("../02_Raw_Data/dist_cepii.xls") %>% ### Distance of Capitals to Moskow
filter(iso_o == "RUS") %>%
mutate(distcap = distcap) %>%
select(iso_d, distcap) %>%
rename(dist = distcap) %>%
add_row(iso_d = "MNE", dist = 1983)
democracyindex_data <- read_csv("../02_Raw_Data/electoral-democracy-index_new.csv") %>% ### Democracy Index
filter(Year == 2021) %>%
rename(Country = Entity) %>%
rename(iso3 = Code)
border_alliance_data <- read_xlsx("../02_Raw_Data/Border_Data.xlsx") %>% ### Data on Borders and political/mitliary alliances
rename(DirectBorder = `Direct Border`)%>%
rename(SecondaryBorder = `Secondary Boarder`)%>%
mutate(Nato = as.factor(Nato)) %>%
mutate(DirectBorder = (DirectBorder)) %>%
mutate(SecondaryBorder = as.factor(SecondaryBorder)) %>%
mutate(OKVS = as.factor(OKVS)) %>%
mutate(BRICS = as.factor(BRICS))
## Merge Data Set
totaldata <- left_join(left_join(left_join(left_join(military_data, country_data, by="Country"), border_alliance_data, by="Country"),democracyindex_data, by="iso3"), distance_data, by=c("iso3" = "iso_d")) %>%
filter(!(Country.x %in% c("Russia","Kosovo", "South Sudan")))
## Merge Data Set
totaldata <- left_join(left_join(left_join(left_join(military_data, country_data, by="Country"), border_alliance_data, by="Country"),democracyindex_data, by="iso3"), distance_data, by=c("iso3" = "iso_d")) %>%
filter(!(Country.x %in% c("Russia","Kosovo", "South Sudan"))) %>%
rename(Country = Country.x) %>%
select(-Country.y)
write.csv(totaldata, "../02_Raw_Data/completedata.csv", row.names = FALSE)
## Necessary Packages
rm(list=ls())
## Get Data
totaldata <- read.csv("../02_Raw_Data/completedata.csv")
## Sample OLS Estimation
mod_basic <- lm(pct2021 ~ dist, data=totaldata)
summary(mod_basic)
##### Bayesian Analysis
fit.mod1 <- brm(pct2021 ~ dist+Nato+BRICS+OKVS+continent+DirectBorder+SecondaryBorder,
data = totaldata,
prior = c(prior(normal(0, 1), class = b),
prior(inv_gamma(2, 1), class = sigma)),
save_pars = save_pars(all = TRUE),
sample_prior="yes",
chains=2,
iter=1000,
warmup = 500)
library(brms)
##### Bayesian Analysis
fit.mod1 <- brm(pct2021 ~ dist+Nato+BRICS+OKVS+continent+DirectBorder+SecondaryBorder,
data = totaldata,
prior = c(prior(normal(0, 1), class = b),
prior(inv_gamma(2, 1), class = sigma)),
save_pars = save_pars(all = TRUE),
sample_prior="yes",
chains=2,
iter=1000,
warmup = 500)
fit.mod1
summary(fit.mod1)
options(scipen = 10)
summary(fit.mod1)
fit.mod1$save_pars
fit.mod1$prior
fit.mod1$model
fit.mod1$fit
fit.mod1$fit$b_dist
fit.mod1$fit
fit.mod1$fit$b_BRICS
a <- fit.mod1$fit
a <- fit.mod1$fit@model_name
fit.mod1$fit@data
fit.mod1$fit@model_pars
fit.mod1$fit@stanmodel
a <- fit.mod1$fit
fit.mod1$fit@par_dims
fit.mod1$fit@par_dims$Intercept
fit.mod1$fit@sim
library(bayesplot)
bayes_R2(fit.mod1)
coef(fit.mod1)
coef(fit.mod1)
fixef(fit.mod1)
coefs_mod1 <- fixef(fit.mod1)
coefs_mod1
a <- as.matrix(fit.mod1)
mcmc_areas(a, pars = c("dist"))
mcmc_areas(a, pars = c("Nato"))
mcmc_areas(a)
mcmc_areas(a, pars = c("b_dist"))
mcmc_areas(a, pars = c("b_dist"), prob=0.95)
mcmc_areas(a)
fit.mod1$save_pars
fit.mod1$fit@model_name
fit.mod1$fit@model_pars
fit.mod1$fit@model_pars
fit.mod1$fit@stanmodel
mcmc_areas(a, pars = c("b_dist",
"b_Nato",
"b_intercept"), prob=0.95)
mcmc_areas(a, pars = c("b_dist",
"b_Nato",
"b_Intercept"), prob=0.95)
mcmc_areas(a, pars = c("b_Nato",
"b_Intercept"), prob=0.95)
mcmc_areas(a, pars = c("b_dist"), prob=0.95)
library(ggplot2)
mcmc_areas(a, pars = c("b_dist"), prob=0.95) + ggtitle("Test")
mcmc_areas(a, pars = c("b_dist"), prob=0.95) + ggtitle("Posterior Distribution of the Distance Parameter (Model 1)")
get_variables(fit.mod1)
??get_variables()
parnames(fit.mod1)
parnames(fit.mod1)[6:9]
mcmc_areas(a, pars = parnames(fit.mod1)[6:9], prob=0.95) + ggtitle("Posterior Distribution of the Continents (Model 1)")
mcmc_areas(a, pars = c("b_dist"), prob=0.95) + ggtitle("Posterior Distribution of the Distance Parameter (Model 1)") + theme_minimal()
mcmc_areas(a, pars = parnames(fit.mod1)[6:9], prob=0.95) + ggtitle("Posterior Distribution of the Continent Parameters (Model 1)") + theme_minimal()
parnames(fit.mod1)
mcmc_areas(a, pars = parnames(fit.mod1)[3:5], prob=0.95) + ggtitle("Posterior Distribution of the Continent Parameters (Model 1)") + theme_minimal()
mcmc_areas(a, pars = parnames(fit.mod1)[3:5], prob=0.95) + ggtitle("Posterior Distribution of the Continent Parameters (Model 1)") + theme_minimal() + geom_vline(xintercept=0)
?geom_vline
mcmc_areas(a, pars = parnames(fit.mod1)[3:5], prob=0.95) + ggtitle("Posterior Distribution of the Continent Parameters (Model 1)") + theme_minimal() + geom_vline(xintercept=0, color="red")
mcmc_areas(a, pars = parnames(fit.mod1)[3:5], prob=0.95) + ggtitle("Posterior Distribution of the Continent Parameters (Model 1)") + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed")
mcmc_areas(a, pars = parnames(fit.mod1)[3:5], prob=0.95) + ggtitle("Posterior Distribution of the Continent Parameters (Model 1)") + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed", size=2)
mcmc_areas(a, pars = parnames(fit.mod1)[3:5], prob=0.95) + ggtitle("Posterior Distribution of the Continent Parameters (Model 1)") + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed", size=1.5)
mcmc_areas(a, pars = parnames(fit.mod1)[3:5], prob=0.95) + ggtitle("Posterior Distribution of the Continent Parameters (Model 1)") + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed", size=1.2)
mcmc_areas(a, pars = parnames(fit.mod1)[3:5], prob=0.95) + ggtitle("Posterior Distribution of the Continent Parameters (Model 1)") + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed", size=1.2) + xlab("Parameters")
mcmc_areas(a, pars = parnames(fit.mod1)[3:5], prob=0.95) + ggtitle("Posterior Distribution of the Continent Parameters (Model 1)") + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed", size=1.2) + ylab("Parameters")
mcmc_areas(a, pars = parnames(fit.mod1)[3:5], prob=0.95) + ggtitle("Posterior Distribution of the Continent Parameters (Model 1)") + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed", size=1.2) + ylab("Parameters")
?xlab
mcmc_areas(a, pars = parnames(fit.mod1)[3:5], prob=0.95) + ggtitle("Posterior Distribution of the Continent Parameters (Model 1)") + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed", size=1.2) + ylab("Parameters")
mcmc_areas(a, pars = c("b_dist"), prob=0.95) + ggtitle("Posterior Distribution of the Distance Parameter (Model 1)")  + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed", size=1.2) + ylab("Parameters")
mcmc_areas(a, pars = parnames(fit.mod1)[6:9], prob=0.95) + ggtitle("Posterior Distribution of the Continent Parameters (Model 1)")  + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed", size=1.2) + ylab("Parameters")
mcmc_areas(a, pars = parnames(fit.mod1)[3:5], prob=0.95) + ggtitle("Posterior Distribution of the Continent Parameters (Model 1)") + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed", size=1.2) + ylab("Parameters")
mcmc_areas(a, pars = c("b_dist"), prob=0.95) + ggtitle("Posterior Distribution of the Distance Parameter (Model 1)")  + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed", size=1.2) + ylab("Parameters")+xlim(-1,1)
mcmc_areas(a, pars = c("b_dist"), prob=0.95) + ggtitle("Posterior Distribution of the Distance Parameter (Model 1)")  + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed", size=1.2) + ylab("Parameters")+xlim(-.1,.1)
mcmc_areas(a, pars = c("b_dist"), prob=0.95) + ggtitle("Posterior Distribution of the Distance Parameter (Model 1)")  + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed", size=1.2) + ylab("Parameters")+xlim(-.01,.01)
mcmc_areas(a, pars = c("b_dist"), prob=0.95) + ggtitle("Posterior Distribution of the Distance Parameter (Model 1)")  + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed", size=1.2) + ylab("Parameters")+xlim(-.001,.001)
mcmc_areas(a, pars = c("b_dist"), prob=0.95) + ggtitle("Posterior Distribution of the Distance Parameter (Model 1)")  + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed", size=1.2) + ylab("Parameters")+xlim(-.0005,.0001)
mcmc_areas(a, pars = c("b_dist"), prob=0.95) + ggtitle("Posterior Distribution of the Distance Parameter (Model 1)")  + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed", size=1.2) + ylab("Parameters")+xlim(-.0004,.0001)
mcmc_areas(a, pars = c("b_dist"), prob=0.95) + ggtitle("Posterior Distribution of the Distance Parameter (Model 1)")  + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed", size=1.2) + ylab("Parameters")+xlim(-.0004,.00005)
mcmc_areas(a, pars = parnames(fit.mod1)[6:9], prob=0.95) + ggtitle("Posterior Distribution of the Continent Parameters (Model 1)")  + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed", size=1.2) + ylab("Parameters")
mcmc_areas(a, pars = parnames(fit.mod1)[3:5], prob=0.95) + ggtitle("Posterior Distribution of the Continent Parameters (Model 1)") + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed", size=1.2) + ylab("Parameters")
mcmc_areas(a, pars = parnames(fit.mod1)[3:5], prob=0.95) + ggtitle("Posterior Distribution of the Alliances Parameters (Model 1)") + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed", size=1.2) + ylab("Parameters")
parnames(fit.mod1)
mcmc_areas(a, pars = parnames(fit.mod1)[10:11], prob=0.95) + ggtitle("Posterior Distribution of the Alliances Parameters (Model 1)") + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed", size=1.2) + ylab("Parameters")
mcmc_areas(a, pars = parnames(fit.mod1)[10:11], prob=0.95) + ggtitle("Posterior Distribution of the Border Relationshipt Parameters (Model 1)") + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed", size=1.2) + ylab("Parameters")
mcmc_areas(a, pars = parnames(fit.mod1)[10:11], prob=0.95) + ggtitle("Posterior Distribution of the Border Relationship Parameters (Model 1)") + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed", size=1.2) + ylab("Parameters")
#### Mehr Modelle?? Wenn ja, welche?
fit.mod2 <- brm(pct2021 ~ dist,
data = totaldata,
prior = c(prior(normal(0, 1), class = b),
prior(inv_gamma(2, 1), class = sigma)),
save_pars = save_pars(all = TRUE),
sample_prior="yes",
chains=2,
iter=1000,
warmup = 500)
plot(fit.mod2)
mcmc_areas(a, pars = c("b_dist"), prob=0.95) + ggtitle("Posterior Distribution of the Distance Parameter (Model 2)")  + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed", size=1.2) + ylab("Parameters")+xlim(-.0004,.00005)
#### Model Weights
model_weights(fit.mod1, fit.mod2, weights = "waic")
#### Model 3 - No basic distance measure
fit.mod3 <- brm(pct2021 ~ Nato+BRICS+OKVS+continent+DirectBorder+SecondaryBorder,
data = totaldata,
prior = c(prior(normal(0, 1), class = b),
prior(inv_gamma(2, 1), class = sigma)),
save_pars = save_pars(all = TRUE),
sample_prior="yes",
chains=2,
iter=1000,
warmup = 500)
mcmc_areas(a, pars = c("b_dist"), prob=0.95) + ggtitle("Posterior Distribution of the Distance Parameter (Model 3)")  + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed", size=1.2) + ylab("Parameters")+xlim(-.0004,.00005)
mcmc_areas(fit.mod3, pars = c("b_Nato"), prob=0.95) + ggtitle("Posterior Distribution of the Distance Parameter (Model 3)")  + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed", size=1.2) + ylab("Parameters")+xlim(-.0004,.00005)
mcmc_areas(fit.mod3, pars = c("b_Nato"), prob=0.95) + ggtitle("Posterior Distribution of the Distance Parameter (Model 3)")  + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed", size=1.2) + ylab("Parameters")
mcmc_areas(fit.mod1, pars = c("b_dist"), prob=0.95) + ggtitle("Posterior Distribution of the Distance Parameter (Model 1)")  + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed", size=1.2) + ylab("Parameters")+xlim(-.0004,.00005)
mcmc_areas(fit.mod1, pars = parnames(fit.mod1)[6:9], prob=0.95) + ggtitle("Posterior Distribution of the Continent Parameters (Model 1)")  + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed", size=1.2) + ylab("Parameters")
mcmc_areas(fit.mod1, pars = parnames(fit.mod1)[3:5], prob=0.95) + ggtitle("Posterior Distribution of the Alliances Parameters (Model 1)") + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed", size=1.2) + ylab("Parameters")
mcmc_areas(fit.mod1, pars = parnames(fit.mod1)[10:11], prob=0.95) + ggtitle("Posterior Distribution of the Border Relationship Parameters (Model 1)") + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed", size=1.2) + ylab("Parameters")
mcmc_areas(fit.mod3, prob=0.95) + ggtitle("Posterior Distribution of the Distance Parameter (Model 3)")  + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed", size=1.2) + ylab("Parameters")
parnames(fit.mod3)
mcmc_areas(fit.mod3, pars = parnames(fit.mod3)[1:10], prob=0.95) + ggtitle("Posterior Distribution of the Distance Parameter (Model 3)")  + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed", size=1.2) + ylab("Parameters")
mcmc_areas(fit.mod3, pars = parnames(fit.mod3)[1:10], prob=0.95) + ggtitle("Posterior Distribution of all Parameters (Model 3)")  + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed", size=1.2) + ylab("Parameters")
#### Model Weights
model_weights(fit.mod1, fit.mod2, fit.mod3, weights = "waic")
mcmc_areas(a, pars = c("b_dist"), prob=0.95) + ggtitle("Posterior Distribution of the Distance Parameter (Model 2)")  + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed", size=1.2) + ylab("Parameters")+xlim(-.0004,.00005)
mcmc_areas(fit.mod2, pars = c("b_dist"), prob=0.95) + ggtitle("Posterior Distribution of the Distance Parameter (Model 2)")  + theme_minimal() + geom_vline(xintercept=0, color="red", lty = "dashed", size=1.2) + ylab("Parameters")+xlim(-.0004,.00005)
library(brms)
library(tidyverse)
library(bayesplot)
library(ggplot2)
## Get Data
totaldata <- read.csv("../02_Raw_Data/completedata.csv")
mod_basic <- lm(pct2021 ~ dist, data=totaldata)
summary(mod_basic)
mod_extensive <- lm(pct2021 ~ dist+Nato+BRICS+OKVS+continent+DirectBorder+SecondaryBorder, data=totaldata)
summary(mod_extensive)
View(totaldata)
View(totaldata)
fit.mod4 <- brm(pct2021 ~ Nato+BRICS+OKVS+continent+elecdem_vdem_owid,
data = totaldata,
prior = c(prior(normal(0, 1), class = b),
prior(inv_gamma(2, 1), class = sigma)),
save_pars = save_pars(all = TRUE),
sample_prior="yes",
chains=2,
iter=1000,
warmup = 500)
rm(list=ls())
library(brms)
library(tidyverse)
library(bayesplot)
library(ggplot2)
## Get Data
totaldata <- read.csv("../02_Raw_Data/completedata.csv")
View(totaldata)
fit.mod4 <- brm(pct2021 ~ Nato+BRICS+OKVS+continent+electdem_vdem_owid,
data = totaldata,
prior = c(prior(normal(0, 1), class = b),
prior(inv_gamma(2, 1), class = sigma)),
save_pars = save_pars(all = TRUE),
sample_prior="yes",
chains=2,
iter=1000,
warmup = 500)
fit.mod1 <- brm(pct2021 ~ dist+Nato+BRICS+OKVS+continent+DirectBorder+SecondaryBorder,
data = totaldata,
prior = c(prior(normal(0, 1), class = b),
prior(inv_gamma(2, 1), class = sigma)),
save_pars = save_pars(all = TRUE),
sample_prior="yes",
chains=2,
iter=1000,
warmup = 500)
mod_basic <- lm(pct2021 ~ dist, data=totaldata)
summary(mod_basic)
#### Model 1 - Every Covariate
fit.mod1 <- brm(pct2021 ~ dist+Nato+BRICS+OKVS+continent+DirectBorder+SecondaryBorder+electdem_vdem_owid,
data = totaldata,
prior = c(prior(normal(0, 1), class = b),
prior(inv_gamma(2, 1), class = sigma)),
save_pars = save_pars(all = TRUE),
sample_prior="yes",
chains=2,
iter=100,
warmup = 50)
